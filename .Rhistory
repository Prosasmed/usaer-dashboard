ld <- read_excel("data/ld.xlsx")
ld2 <- read_excel("data/Id_2.xlsx")
ld3 <- read_excel("data/ld_3.xlsx")
ld4 <- read_excel("data/ld_4.xlsx")
ld5 <- read_excel("data/ld_5.xlsx")
ld6 <- read_excel("data/ld_6.xlsx")
ld7 <- read_excel("data/ld_7.xlsx")
ld8 <- read_excel("data/ld_8.xlsx")
ld8 <-
as.tibble(ld8)
# Chunk 3: set-inputs
#| label: set-inputs
time_period <- paste(params$month, params$year)
# Chunk 4: prep-data
#| label: prep-data
ld <- ld |>
mutate(
delivery_method = str_to_sentence(delivery_method),
term = str_to_sentence(term),
parity = case_when(
parity == "1"  ~ "Nulliparous",
parity == "2"  ~ "Primiparous",
parity == "3+" ~ "Multiparous"
),
parity = fct_relevel(parity, "Nulliparous", "Primiparous", "Multiparous"),
maternal_age = fct_relevel(maternal_age, "<20", "20-34", "35+")
)
# Chunk 5: all-values
#| label: all-values
#| results: hide
n_schools1 <- "8,424"
n_schools2 <- '8,813'
growth <- 0.04
# Chunk 6
#| content: valuebox
#| title: "Escuelas (2018-2019)"
list(
icon = "building",
color = "#df96ac",
value = n_schools1
)
# Chunk 7
#| content: valuebox
#| title: "Escuelas (2019-2020)"
list(
icon = "backpack3",
color = "#82c6b2",
value = n_schools2
)
# Chunk 8
#| content: valuebox
#| title: "Crecimiento 2019-2020"
list(
icon = "graph-up-arrow",
color = "#D4C19C",
value = percent(growth)
)
# Chunk 9
#| title: Centros escolares USAER
ld2 |>
filter(unidad == "Centros escolares") |>
group_by(educacion, Ciclo) |>
summarise(value_mean = mean(value, na.rm = TRUE), .groups = "drop") |>
arrange(factor(educacion, levels = c("Inicial", "Preescolar", "Primaria",
"Secundaria"))) |>
pivot_wider(names_from = Ciclo, values_from = value_mean,
names_prefix = "") |>
gt() |>
fmt_number(
columns = c("1", "2"),
decimals = 0
) |>
cols_label(
`1` = "2018-2019",
`2` = "2019-2020"
) |>
cols_label(educacion = "")
# Chunk 10
#| title: Atención estudiantil USAER
ld2 |>
# Filtrar solo los datos donde 'unidad' es 'Estudiantes'
filter(unidad == "Estudiantes") |>
# Resumir los datos para calcular el valor promedio de 'value' por 'educacion' y 'ciclo'
group_by(educacion, Ciclo) |>
summarise(value_mean = mean(value, na.rm = TRUE), .groups = "drop") |>
# Reorganizar las filas antes de pasar a gt() para asegurar que las categorías de educación estén en orden
arrange(factor(educacion, levels = c("Inicial", "Preescolar", "Primaria", "Secundaria"))) |>
# Reorganizar los datos para tener ciclos '1' y '2' en columnas separadas
pivot_wider(names_from = Ciclo, values_from = value_mean, names_prefix = "") |>
# Crear la tabla con gt
gt() |>
# Formatear las columnas de ciclo como números con decimales
fmt_number(
columns = c("1", "2"),
decimals = 0
) |>
# Cambiar los nombres de las columnas a 2018-2019 y 2019-2020
cols_label(
`1` = "2018-2019",
`2` = "2019-2020"
) |>
# Eliminar el nombre de la primera columna
cols_label(educacion = "")
# Chunk 11
#| title: Evolución de escuelas USAER
#| fig-width: 10
#| fig-height: 15
#| fig-asp: 0.7
ld2 |>
filter(unidad == "Centros escolares") |>
ggplot(aes(x = educacion, y = value, color = as.factor(Ciclo))) +
geom_segment(aes(x = as.numeric(as.factor(educacion)) +
0.2 * (as.numeric(as.factor(Ciclo)) - 1.5),
xend = as.numeric(as.factor(educacion)) +
0.2 * (as.numeric(as.factor(Ciclo)) - 1.5),
y = 0, yend = value),
linewidth = 1) +
geom_point(aes(x = as.numeric(as.factor(educacion)) +
0.2 * (as.numeric(as.factor(Ciclo)) - 1.5)),
size = 4) +
ggtitle("Escuelas atendidas por USAER:",
subtitle = 'Ciclos escolares 2018-2019 y 2019-2020.') +
labs(x = "Nivel educativo", y = "Planteles (miles)", color = NULL,
caption = "Fuente: elaboración con base en datos de USAER (2022).") +
scale_color_manual(values = c("1" = "#621132", "2" = "#13322B"),
labels = c("2018-2019", "2019-2020")) +
scale_x_continuous(breaks = seq_along(unique(ld2$educacion)),
labels = unique(ld2$educacion)) +
scale_y_continuous(labels = scales::number_format(scale = 0.001)) +
theme_apa() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 12, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom')
# Chunk 12
#| title: Evolución estudiantil USAER
#| fig-width: 10
#| fig-height: 15
#| fig-asp: 0.7
ld2 %>%
filter(unidad == "Estudiantes") %>%
ggplot(aes(x = educacion, y = value / 1000,
color = as.factor(Ciclo))) +
geom_segment(aes(x = as.numeric(as.factor(educacion)) +
0.2 * (as.numeric(as.factor(Ciclo)) - 1.5),
xend = as.numeric(as.factor(educacion)) +
0.2 * (as.numeric(as.factor(Ciclo)) - 1.5),
y = 0, yend = value / 1000),
linewidth = 1) +
geom_point(aes(x = as.numeric(as.factor(educacion)) +
0.2 * (as.numeric(as.factor(Ciclo)) - 1.5)),
size = 4) +
ggtitle('Estudiantes atendidos por USAER:',
subtitle = 'Ciclos escolares 2018-2019 y 2019-2020.') +
labs(x = "Nivel educativo", y = "Estudiantes (Miles)", color = NULL,
caption = 'Fuente: elaboración con base en datos de USAER (2022).') +
scale_color_manual(values = c("1" = "#621132", "2" = "#13322B"),
labels = c("2018-2019", "2019-2020")) +
scale_x_continuous(breaks = seq_along(unique(ld2$educacion)),
labels = unique(ld2$educacion)) +
scale_y_continuous(labels = scales::label_comma()) +
theme_apa() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 12, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom')
# Chunk 13: Escuelas USAER y Estudiantes con NEE
#| label: Escuelas USAER y Estudiantes con NEE
#| results: hide
ld_v <- ld |>
filter(delivery_method == "Vaginal")
n_births_v <- nrow(ld_v)
p_preterm_v <- ld_v |>
count(term) |>
mutate(p = n / sum(n)) |>
filter(term == "Pre-term") |>
pull(p)
p_preterm_color_v <- case_when(
between(p_preterm_v, params$us_preterm_rate, params$us_preterm_rate + params$threshold_diff) ~ "warning",
p_preterm_v > params$us_preterm_rate + params$threshold_diff ~ "danger",
.default = "light"
)
# Chunk 14: example-plot1
#| label: example-plot1
#| title: "USAER por Primarias"
#| fig-width: 10
#| fig-height: 15
#| fig-asp: 0.7
ld4 %>%
ggplot(aes(x = estado)) +
geom_segment(aes(xend = estado,
y = v1,
yend = v2),
color = "black") +
geom_point(aes(y = v1,
color = "V1"),
size = 3) +
geom_point(aes(y = v2,
color = "V2"),
size = 3) +
ggtitle("Escuelas primarias públicas y planteles atendidos por USAER:",
subtitle = "Diferencia absoluta según entidad federativa.") +
labs(x = "Entidades federativas", y = "# Absoluto", colour = NULL,
caption = "Fuente: elaboración con base en datos de USAER (2022).\nNota: La distancia entre puntos indica la diferencia absoluta entre escuelas primarias por entidad federativa, y aquellas atendidas por USAER.") +
scale_color_manual(
values = c("V1" = "#9D2449", "V2" = "#285C4D"),
labels = c("V1" = "Total de Primarias",
"V2" = "Escuelas primarias generales públicas con USAER")) +
theme_apa() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black', angle = 45,
hjust = 1),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom')
# Chunk 15: example-plot2
#| label: example-plot2
#| title: "USAER y alumnos NEE"
#| fig-width: 10
#| fig-height: 15
#| fig-asp: 0.7
ld5 %>%
ggplot(aes(x = estado)) +
geom_segment(aes(xend = estado, y = v1, yend = v4),
color = "black") +
geom_point(aes(y = v1, color = "V1"), size = 3) +
geom_point(aes(y = v4, color = "V4"), size = 3) +
ggtitle("Relación entre escuelas primarias y planteles con alumnos con NEE",
subtitle = "Diferencia absoluta por estado de la República") +
labs(x = "Entidades federativas", y = "# Absoluto", colour = NULL,
caption = "Fuente: elaboración con base en datos de USAER (2022).\nNota: La distancia entre los puntos indica la diferencia absoluta entre escuelas primarias por entidad federativa, y los planteles atendidos por USAER\nque cuentan con al menos un(a) alumno(a) con necesidades educativas especiales.") +
scale_color_manual(
values = c("V1" = "#9D2449", "V4" = "#285C4D"),
labels = c("V1" = "Total de Primarias",
"V4" = "Escuelas que atienden al menos un estudiante con NEE")) +
theme_apa() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black', angle = 45,
hjust = 1),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom')
# Chunk 16: example-plot3
#| label: example-plot3
#| title: "Escuelas USAER"
#| fig-width: 10
#| fig-height: 15
#| fig-asp: 0.7
ld3 %>%
ggplot(aes(x = estado)) +
geom_segment(aes(xend = estado, y = v3, yend = v5), color = "black") +
geom_point(aes(y = v3,  color = "V3"),  size = 3) +
geom_point(aes(y = v5,  color = "V5"),  size = 3) +
ggtitle("Primarias USAER y la atención de alumnos con necesidades educativas especiales:",
subtitle = "Diferencia entre proporciones de atención.") +
labs(x = 'Entidades federativas', y = 'Porcentaje', colour = NULL,
caption = 'Fuente: elaboración con base en datos de USAER (2022).\nNota: la diferencia representa la distancia en puntos porcentuales entre primarias generales públicas USAER, y aquellas que atienden al menos un estu-\ndiante con necesidades educativas especiales.') +
scale_color_manual(
values = c("V3" = "#9D2449", "V5" = "#285C4D"),
labels = c("V3" = "Primarias públicas con USAER (%)",
"V5" = "Primarias públicas con USAER y estudiantes NEE (%)")) +
theme_apa() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black', angle = 45,
hjust = 1),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom')
# Chunk 17: cesarean-values
#| label: cesarean-values
#| results: hide
ld_c <- ld |>
filter(delivery_method == "Cesarean")
n_births_c <- nrow(ld_c)
p_preterm_c <- ld_c |>
count(term) |>
mutate(p = n / sum(n)) |>
filter(term == "Pre-term") |>
pull(p)
p_preterm_color_c <- case_when(
between(p_preterm_c, params$us_preterm_rate, params$us_preterm_rate + params$threshold_diff) ~ "warning",
p_preterm_c > params$us_preterm_rate + params$threshold_diff ~ "danger",
.default = "light"
)
# Chunk 18
#| content: valuebox
#| title: "Alumnos (2018-2019)"
list(
icon = "backpack3",
color = "#D4C19C",
value = "519,494"
)
# Chunk 19
#| component: valuebox
#| title: "Alumnos (2019-2020)"
list(
icon = "backpack4",
color = "#df96ac",
value = "540,930"
)
# Chunk 20
#| component: valuebox
#| title: "Crecimiento (2019-2020)"
list(
icon = "graph-up-arrow",
color = "#82c6b2",
value = percent(growth)
)
# Chunk 21: example-plot4
#| label: example-plot4
#| title: "Estudiantes atendidos por nivel"
#| fig-width: 10
#| fig-height: 15
#| fig-asp: 0.7
ld6 %>%
filter(nivel != "Inicial") %>%  # Excluye la categoría "Inicial"
ggplot(aes(x = "", y = v4, fill = nivel)) +
geom_bar(stat = "identity", width = 1, color = "white") +
geom_text(aes(label = round(v4, 2)), position = position_stack(vjust = 0.5),
color = "white", size = 5) +
coord_polar("y", start = 0) +
scale_fill_manual(
values = c("#13322B", "#B38E5D", "#621132"),  # Ajusta los colores tras eliminar "Inicial"
labels = c("Secundaria", "Primaria", "Preescolar")
) +
ggtitle("Estudiantes atendidos por USAER:",
subtitle = "Ciclo escolar 2019-2020, por nivel educativo") +
labs(x = NULL, y = NULL,
caption = "Fuente: elaboración con base en datos de USAER (2022).\nNota: la educación Inicial se excluye de la visualización debido a la proporción de\nestudiantes atendidos menor al 1%.") +
guides(fill = guide_legend(title = NULL)) +
theme_minimal() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black', angle = 45,
hjust = 1),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom')
# Chunk 22: example-plot5
#| label: example-plot5
#| title: "BAP's atendidas"
#| fig-width: 10
#| fig-height: 15
#| fig-asp: 0.7
# Considerar cambiar "BAP's por NEE's"
ld7 %>%
ggplot(aes(x = discapacidad, y = value, fill = nivel)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("#D4C19C", "#13322B", "#B38E5D", "#621132")) +
scale_y_continuous(labels = scales::label_number(big.mark = ",", decimal.mark = ".")) +
ggtitle("Estudiantes atendidos según su condición",
subtitle = "Ciclo escolar 2019-2020, por nivel educativo") +
labs(x = NULL, y = NULL) +
theme_apa() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom')
# Chunk 23: example-plot6
#| label: example-plot6
#| title: "Estudiantes con NEE"
#| fig-width: 10
#| fig-height: 15
#| fig-asp: 0.7
ld8 %>%
ggplot(aes(x = "", y = proporcion, fill = discapacidad)) +
geom_bar(stat = "identity", width = 1, color = "white") +
geom_text_repel(aes(x = 1.4, y = round(proporcion, 2),
label = round(proporcion, 2)),
nudge_x = .3, segment.size = .7, show.legend = FALSE) +
coord_polar("y", start = 0) +
scale_fill_manual(
values = c("#D4C19C", "#13322B", "#B38E5D", "#621132", "#4F4F4F")) +
ggtitle("Estudiantes atendidos por USAER según su condición o discapacidad",
subtitle = "Ciclo escolar 2019-2020") +
labs(x = NULL, y = NULL, fill = NULL) +
theme_minimal() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom') +
guides(fill = guide_legend(nrow = 2))
?geom_text_repel
ld8 |>
ggplot(aes(x = discapacidad, y = proporcion, fill = discapacidad)) +
geom_bar(stat = 'identity', colour = 'white')
ld8 |>
ggplot(aes(x = discapacidad, y = proporcion, fill = discapacidad)) +
geom_bar(stat = 'identity', colour = 'white') +
scale_fill_manual(
values = c('#D4C19C', '#13322B', '#B38E5D', '#621132', '#4F4F4F')
)
ld8 |>
ggplot(aes(x = discapacidad, y = proporcion, fill = discapacidad)) +
geom_col(stat = 'identity', colour = 'white') +
scale_fill_manual(
values = c('#D4C19C', '#13322B', '#B38E5D', '#621132', '#4F4F4F')
)
ld8 %>%
ggplot(aes(x = reorder(discapacidad, proporcion), y = proporcion, fill = discapacidad)) +
geom_col(color = "white") +
scale_fill_manual(
values = c("#D4C19C", "#13322B", "#B38E5D", "#621132", "#4F4F4F")) +
ggtitle("Estudiantes atendidos por USAER según su condición o discapacidad",
subtitle = "Ciclo escolar 2019-2020") +
labs(x = "Condición o discapacidad", y = "Proporción", fill = NULL) +
theme_minimal() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'bottom') +
guides(fill = guide_legend(nrow = 2)) +
coord_flip()  # Opcional: Si quieres que las barras sean horizontales
ld8 %>%
ggplot(aes(x = reorder(discapacidad, proporcion), y = proporcion, fill = discapacidad)) +
geom_col(color = "white") +
scale_fill_manual(
values = c("#D4C19C", "#13322B", "#B38E5D", "#621132", "#4F4F4F")) +
ggtitle("Estudiantes atendidos por USAER según su condición o discapacidad",
subtitle = "Ciclo escolar 2019-2020") +
labs(x = "Condición o discapacidad", y = "Proporción", fill = NULL) +
theme_minimal() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'none') +
guides(fill = guide_legend(nrow = 2)) +
coord_flip()  # Opcional: Si quieres que las barras sean horizontales
ld8 %>%
ggplot(aes(x = reorder(discapacidad, proporcion), y = proporcion, fill = discapacidad)) +
geom_col(color = "white") +
scale_fill_manual(
values = c("#D4C19C", "#13322B", "#B38E5D", "#621132", "#4F4F4F")) +
ggtitle("Estudiantes atendidos por USAER según su condición o discapacidad",
subtitle = "Ciclo escolar 2019-2020") +
labs(x = "Condición o discapacidad", y = "Proporción", fill = NULL) +
theme_apa() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'none') +
guides(fill = guide_legend(nrow = 2)) +
coord_flip()  # Opcional: Si quieres que las barras sean horizontales
ld8 %>%
ggplot(aes(x = reorder(discapacidad, proporcion), y = proporcion, fill = discapacidad)) +
geom_col(color = "white") +
scale_fill_manual(
values = c("#D4C19C", "#13322B", "#B38E5D", "#621132", "#4F4F4F")) +
ggtitle("Estudiantes atendidos por USAER según su condición o discapacidad",
subtitle = "Ciclo escolar 2019-2020") +
labs(x = "Condición o discapacidad", y = "Proporción", fill = NULL) +
theme_apa() +
theme(plot.title = element_text(size = 14, color = 'black', face = 'bold'),
plot.subtitle = element_text(size = 14, color = 'black', face = 'bold'),
legend.text = element_text(size = 12, color = 'black'),
plot.caption = element_text(size = 10, color = 'black', hjust = 0),
axis.title.x = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 12, color = 'black'),
axis.text.x = element_text(size = 10, color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
legend.position = 'none') +
guides(fill = guide_legend(nrow = 2))
